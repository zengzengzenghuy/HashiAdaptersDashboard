// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HashStored extends ethereum.Event {
  get params(): HashStored__Params {
    return new HashStored__Params(this);
  }
}

export class HashStored__Params {
  _event: HashStored;

  constructor(event: HashStored) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get hashes(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class DendrETHAdapter extends ethereum.SmartContract {
  static bind(address: Address): DendrETHAdapter {
    return new DendrETHAdapter("DendrETHAdapter", address);
  }

  dendrETHAddress(): Address {
    let result = super.call(
      "dendrETHAddress",
      "dendrETHAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dendrETHAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dendrETHAddress",
      "dendrETHAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHashFromOracle(domain: BigInt, id: BigInt): Bytes {
    let result = super.call(
      "getHashFromOracle",
      "getHashFromOracle(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(domain),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBytes();
  }

  try_getHashFromOracle(
    domain: BigInt,
    id: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getHashFromOracle",
      "getHashFromOracle(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(domain),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashes(param0: BigInt, param1: BigInt): Bytes {
    let result = super.call("hashes", "hashes(uint256,uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBytes();
  }

  try_hashes(param0: BigInt, param1: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashes", "hashes(uint256,uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dendrETHAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ProveAncestralBlockHashesCall extends ethereum.Call {
  get inputs(): ProveAncestralBlockHashesCall__Inputs {
    return new ProveAncestralBlockHashesCall__Inputs(this);
  }

  get outputs(): ProveAncestralBlockHashesCall__Outputs {
    return new ProveAncestralBlockHashesCall__Outputs(this);
  }
}

export class ProveAncestralBlockHashesCall__Inputs {
  _call: ProveAncestralBlockHashesCall;

  constructor(call: ProveAncestralBlockHashesCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get blockHeaders(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class ProveAncestralBlockHashesCall__Outputs {
  _call: ProveAncestralBlockHashesCall;

  constructor(call: ProveAncestralBlockHashesCall) {
    this._call = call;
  }
}

export class StoreBlockHeaderCall extends ethereum.Call {
  get inputs(): StoreBlockHeaderCall__Inputs {
    return new StoreBlockHeaderCall__Inputs(this);
  }

  get outputs(): StoreBlockHeaderCall__Outputs {
    return new StoreBlockHeaderCall__Outputs(this);
  }
}

export class StoreBlockHeaderCall__Inputs {
  _call: StoreBlockHeaderCall;

  constructor(call: StoreBlockHeaderCall) {
    this._call = call;
  }

  get _chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _blockNumber(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _blockNumberProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get _blockHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _blockHashProof(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }
}

export class StoreBlockHeaderCall__Outputs {
  _call: StoreBlockHeaderCall;

  constructor(call: StoreBlockHeaderCall) {
    this._call = call;
  }
}

export class StoreBlockHeader1Call extends ethereum.Call {
  get inputs(): StoreBlockHeader1Call__Inputs {
    return new StoreBlockHeader1Call__Inputs(this);
  }

  get outputs(): StoreBlockHeader1Call__Outputs {
    return new StoreBlockHeader1Call__Outputs(this);
  }
}

export class StoreBlockHeader1Call__Inputs {
  _call: StoreBlockHeader1Call;

  constructor(call: StoreBlockHeader1Call) {
    this._call = call;
  }

  get _chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _blockNumber(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _blockNumberProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get _blockHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _blockHashProof(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get update(): StoreBlockHeader1CallUpdateStruct {
    return changetype<StoreBlockHeader1CallUpdateStruct>(
      this._call.inputValues[6].value.toTuple()
    );
  }
}

export class StoreBlockHeader1Call__Outputs {
  _call: StoreBlockHeader1Call;

  constructor(call: StoreBlockHeader1Call) {
    this._call = call;
  }
}

export class StoreBlockHeader1CallUpdateStruct extends ethereum.Tuple {
  get attestedHeaderRoot(): Bytes {
    return this[0].toBytes();
  }

  get attestedHeaderSlot(): BigInt {
    return this[1].toBigInt();
  }

  get finalizedHeaderRoot(): Bytes {
    return this[2].toBytes();
  }

  get finalizedExecutionStateRoot(): Bytes {
    return this[3].toBytes();
  }

  get a(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get b(): Array<Array<BigInt>> {
    return this[5].toBigIntMatrix();
  }

  get c(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}
